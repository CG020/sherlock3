"""
Katelyn Rohrer, Lydia Dufek, Camila Grubb
CSC 483/583
This program reads in answers.txt (generated by Query.java)
and feeds each of the results into the OpenAI ChatGPT API.
It counts the number of correct answers at precision 1 (P@1)
and writes the results to file GPT_answers[3.5/4.0].txt
"""

from conversation import Conversation

MODEL_4 = False

def read_file(filename):
    """
    Generator that reads in the file and parses it. For each iteration,
    it yields one query, list of documents, and the correct answer.
    :param filename: The string name of the file to read in
    :return: Yields a tuple containing the string query,
             list of string documents,
             and string correct answer
    """
    with open(filename) as file:
        contents = file.read()

    answers = [q.strip()
               for q in contents.split("\n\n\n")
               if q.startswith("Query")]
    assert len(answers) == 100

    for answer in answers:
        # remove the last line with the original answer
        correct_answer = answer[answer.rindex("\n"):].strip()
        answer = answer[:answer.rindex("\n")]
        query, *documents = answer.split("\n")

        # remove the word "returned" at the end
        query = query[:-len(" returned:")]

        # remove scores from each document
        documents = [doc[:doc.find(":")].strip() for doc in documents]

        yield query, "\n".join(documents), correct_answer


def main():
    if MODEL_4:
        model = "gpt-4"
        out_file = "GPT_answers4.0.txt"
    else:
        model = "gpt-3.5-turbo"
        out_file = "GPT_answers3.5.txt"

    convo = Conversation(model=model, memory=False)
    prompt_header = ("Given the following query and documents, "
                     "rerank the documents based on their accuracy to the prompt. "
                     "Write only the exact title of the top answer.")

    with open(out_file, "w") as file:
        # query gpt on each of the prompts
        queries, correct_answers = [], []
        for query, documents, correct_answer in read_file("answers.txt"):
            print(query)
            queries.append(query)
            correct_answers.append(correct_answer)
            response = convo.prompt(f"{prompt_header}\n{query}\n{documents}")
            file.write(query + "\n")
            file.write(f"\t{'\n\t'.join(documents.split('\n'))}\n")
            file.write(response + "\n\n\n")

        # counting number correct
        num_correct = 0
        for query, response, correct_answer\
                in zip(queries, convo.responses(), correct_answers):
            is_correct_response = response in correct_answer.split("|")
            num_correct += is_correct_response

        file.write(f"\n\nFINAL COUNT: {num_correct}\n")

if __name__ == "__main__":
    main()

